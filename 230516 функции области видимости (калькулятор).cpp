// 230516.cpp 
//
//Функции
//
// {} - описывают области видимости, все переменные видны только там (принцип обратной Матрёшки), распространяется и на заголовок к которому они приписаны
// глобальные переменные легко случайно закрыть локальными переменными, поэму лучше использовать как можно меньше глобальных переменных
// чтобы этого избежать в СРР есть следующая конструкция например cout << "global a=" << ::a << "\n"; 

// F11 - движение программы по шагам в ручном режиме


#include <iostream>
#include <Windows.h>

using namespace std;

int a = 5; // глобальная переменная, видна всем функциям

void SetA()
{
	a = 9; // поменяла глобальную переменную а = 5, теперь а=9
}
void ShowA()
{
	cout << "a=" << a << "\n";
}
void SetASecond()
{
	int a = 7; // внутри функции создалась новая переменная а (т.к. появился int - объявилась новая переменная), 
	           //которая закрыла собой другую глобальную а, но не поменяла её
	cout << "a=" << a << "\n";
	cout << "global a=" << ::a << "\n"; // сразу ищет глобальную переменную, не ищет локальную
}

void Proto(int c);                     //прототип функции, которая ничего не возвращает

void First(int a)                      //функция ничего не возвращает
{
	cout << a << "\n";
}

//int, long, shory
//float, double
//char
//bool

int Second(int a, int b)               //функция возвращает то что после return, здесь обязательно return 
{
	return a * a + b * b;
}

void Swap(int a, int b)               // функция не изменяет переменные. а и b не изменятся, в отличие от массивов
{
	int t = a;
	a = b;
	b = a;
}

void SwapArr(int ar[], int a, int b) // функция изменяет массив, в отличие от переменных
{
	int t = ar[a];
	ar[a] = ar[b];
	ar[b] = ar[a];
}
// если массив двумерный, обязательно!!! указывается количество столбцов, строки не принципиально

//Операторы для калькулятора (для функции Calculate )
//по такому же принципу можно добавить операторы на вычитание и умножение
double Add(double a, double b)// функция - оператор сложения
{
	return a + b;
}
double Divide(double a, double b)//функция - оператор деления
{
	if (b != 0)//если b не равно 0, то выплняем деление
		return a / b;//если есть return, break не обязательно, т.к. до break не дойдем, т.к. после return не выполняется больше ничего.
	cout << "Error! Division by Zero!" << "\n";//в противном случае выводим текст об ошибке и возвращаем 0
	//Все ветви функции должны что-то вернуть, поэтому return 0;
	return 0; // это решение не универсальное, т.к. где-то "0" может быть равен какому-то результату, а это не очень хорошо

}


double Calculate(double a, double b, char op) // переменные называются также, как в main но они совсем другие
{
	switch (op)
	{
	case '+':
		return Add(a, b); // вариант использования функции - оператора Add
	case '-':
		return a - b;//вариант без использования функции - оператора, если есть return, break не обязательно, т.к. до break не дойдем, т.к. после return не выполняется больше ничего
	case '*':
		return a * b;//вариант без использования функции - оператора, если есть return, break не обязательно, т.к. до break не дойдем, т.к. после return не выполняется больше ничего
	case '/':
		return Divide(a, b); // вариант использования функции - оператора Divide
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	//============================================================================================
	First(5);                           //вызываем функцию First и передаем параметр 5
	cout << "\n";
	//============================================================================================
	cout << Second(5, 6) << "\n";       //вызываем функцию Second
	cout << "\n";
	//============================================================================================
	Proto(6);
	cout << "\n";
	//============================================================================================
	int x = 2, y = 10;
	Swap(x, y);
	cout << "\n";
	//============================================================================================
	cout << "области видимости"<<"\n";
	ShowA();
	SetA();
	ShowA();
	SetASecond();
	ShowA();
    cout << "\n";
	//============================================================================================

	// вывод символа и числа
	// 
	// программа калькулятор

	system("cls");
	double a, b;
	char op;
	cout << "Enter expression:";
	cin >> a >> op >> b;
	double res = Calculate(a, b, op);
	cout << "Result:" << res << "\n";

	//

	return 0;
}

void Proto(int c)                       //прототипированная функция ничего не возвращает
{
	cout << c << "\n";
}
