// 230627 препроцессор
//
// Препроцессор: process - обработка; preprocess - предварительная обработка
// Перед тем как превратить наш код в машинный код компилятором, препроцессор проходится по тектсу и вносит текстовые изменения
// Это также способ введения констант
// Препроцессор можеть заменить текст в коде программы, который мы ему передадим
// #define
// # - всегда в начале записывается у препроцессора, что говорит компилятору не обращать на этот код внимания
// препроцессор это свой язык программирования
// #define PI 3.14159 - автоматически заменит все PI на 3.14159
// #define E 2.71828
// при этом препроцессор работает с текстом
// 
// #define forever while(1) - бесконечный цикл
// 
// еще одна команда препроцессора #include (вставляет содержимое файла)
// 
// #команда - директива препроцессора (могут быть в любом месте программы, обычно - сверху)
// 
// Препроцессор внутри кавычек " искать константы не будет
// 
// #undef - директива процессора используется когда много #define (похоже на разыменование) / разопределение
//
//   \ - символ переноса строки
//
// Макросы (выражения после константы и директивы препроцессора)- тоже используется препроцессором
// 
// #pragma region (#pragma endregion) - можно группировать кусок кода
// 
// Директивы условных компиляций - набор команд котор управляются препроцессорной обработкой, например #if, #ifdef, #ifndef, #else, #elif, #endif
// используется для определния платформы
// 


#include <iostream>
#define forever while(1) 
#define begin {
#define end }
#define NAME "William Shakespear"
#define YES 1
#define AND <<
#define NAME "William" \
              "Shakespear" // перенос строки через \  слэш 

#define MULT(a,b) (a) * (b)// макрос
// скобки в макросе влияют на порядок арифметических действий
// (5 + 6) * (3 + 4) - верная запись
// 5 + 6 * 3 + 4 - неверная запись (см как записан макрос)

#define ARRAY_FLAG 1
#define VALT1 9
#define VALT2 15


using namespace std;

int main()
{
	int i = 0;

	forever
	{
	i += rand() % 10;
	cout << i << " ";
	if (i % 2 == 0)
		break;
	}
//===========================================
	forever
	begin
	
	i += rand() % 10;
	cout << i << " ";
	if (i % 2 == 0)
		break;
	end
		
//===========================================
	cout << " Hello! My name is " << NAME << endl;
	cout << " Hello! My name is " AND NAME AND endl;
	cout << "YES" << endl;
#undef YES
	cout << MULT(5 + 6, 3 + 4) << endl;

//===========================================
#pragma region Return
/*
#if/#ifdef/#ifndef <условие>
<code1>
#else
<code2>
#endif

#if <константное целочисленное выражение>
		   правда если отличное от нуля
		   #if 5+12

#ifdef <идентификатор с помощью директивы define>
		   правда, если такой идентификатор определен
		   (используется на разных платформах, т.к. там разные определения)

#ifndef <идентификатор с помощью директивы define>
		   правда, если такой идентификатор не определен
		   (используется на разных платформах, т.к. там разные определения)

*/

#pragma endregion

//===========================================

#ifdef ARRAY_FLAG
	int arr[n] = { n1,n2 };

#else
	cout << "Array flag not defined" << endl;
#endif
#if VALT1 * VALT2 == 9
	cout << "9\n" << endl;
#elif VALT1 * VALT2 == 15
	cout << "15\n" << endl;
#else
#endif
//===========================================






	return 0;
}

